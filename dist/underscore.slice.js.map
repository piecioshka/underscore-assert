{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 07c79f19de999db362dc","webpack:///./index.js?7351","webpack:///./index.js","webpack:///./src/index.js?3020"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;AAEA,kBCAA,mBDAA,CCAA,CDAA;;;;;;;AEFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,YAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAW,QAAQ;AACnB,YAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA","file":"underscore.slice.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 07c79f19de999db362dc","'use strict';\n\nmodule.exports = require('./src/index');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./index.js\n// module id = 0\n// module chunks = 0 1","null\n\n\n// WEBPACK FOOTER //\n// ./~/string-replace-loader?{\"multiple\":[{\"search\":\"$AUTHOR$\",\"replace\":\"Piotr Kowalski <piecioshka@gmail.com> (http:/piecioshka.pl)\"},{\"search\":\"$NAME$\",\"replace\":\"underscore.assert\"},{\"search\":\"$DESCRIPTION$\",\"replace\":\"Plugin for Underscore.js: add method '_.assert', which simplify checking states\"},{\"search\":\"$VERSION$\",\"replace\":\"1.2.1\"},{\"search\":\"$LICENSE$\",\"replace\":\"MIT\"}]}!./index.js","/**\n * @author Piotr Kowalski <piecioshka@gmail.com> (http://piecioshka.pl)\n * @name underscore.assert\n * @description Plugin for Underscore.js: add method '_.assert', which simplify checking states\n * @version 1.2.1\n * @license MIT\n * @example\n *   // nothing happened ...\n *   _.assert(true, 'True must be truly value');\n *\n *   // throws AssertionError with message\n *   _.assert(typeof Object === 'number', 'Global value *Object* should be fn');\n */\n\n'use strict';\n\n/**\n * Custom error constructor.\n *\n * @constructor\n * @param {string} [message]\n */\nfunction AssertionError(message) {\n    var err = new Error(message);\n    var stack = err.stack || err.stacktrace || null;\n\n    this.name = 'AssertionError';\n    this.message = (message || this.name);\n    this.stacktrace = stack;\n}\n\nAssertionError.prototype = Error.prototype;\nAssertionError.prototype.constructor = AssertionError;\n\n/**\n * Check first param for `true`.\n * When first param is `false` value, throw `AssertionError`.\n *\n * @param {boolean} condition\n * @param {string} [message]\n * @throws When condition will be falsy value.\n */\nfunction assert(condition, message) {\n    if (!condition) {\n        throw new assert.ErrorConstructor(message);\n    }\n}\n\n// Set reference to constructor of error which will throw on failed.\nassert.ErrorConstructor = AssertionError;\n\nmodule.exports = assert;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 1\n// module chunks = 0 1"],"sourceRoot":""}